<Window
    x:Class="CJDBelegungsplaner.WPF.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:deleteFormViewModels="clr-namespace:CJDBelegungsplaner.WPF.ViewModels.DeleteForms"
    xmlns:deleteFormViews="clr-namespace:CJDBelegungsplaner.WPF.Views.DeleteForms"
    xmlns:inputFormViewModels="clr-namespace:CJDBelegungsplaner.WPF.ViewModels.InputForms"
    xmlns:inputFormViews="clr-namespace:CJDBelegungsplaner.WPF.Views.InputForms"
    xmlns:local="clr-namespace:CJDBelegungsplaner.WPF"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:viewmodels="clr-namespace:CJDBelegungsplaner.WPF.ViewModels"
    xmlns:views="clr-namespace:CJDBelegungsplaner.WPF.Views"
    Title="CJD Belegungsplaner"
    Width="1050"
    Height="550"
    Style="{StaticResource MaterialDesignWindow}"
    mc:Ignorable="d">

    <Grid>
        <Grid.Resources>

            <!--
                ViewModels
            -->

            <DataTemplate DataType="{x:Type viewmodels:UserListViewModel}">
                <views:UserListView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:OccupancyViewModel}">
                <views:OccupancyView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:ReservationViewModel}">
                <views:ReservationView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:LoginViewModel}">
                <views:LoginView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:LogEntryListViewModel}">
                <views:LogEntryListView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:ClassListViewModel}">
                <views:ClassListView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:GuestListViewModel}">
                <views:GuestListView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:ProgressDialogViewModel}">
                <views:ProgressDialogView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:CompanyListViewModel}">
                <views:CompanyListView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:MessageDialogViewModel}">
                <views:MessageDialogView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:GuestDetailsViewModel}">
                <views:GuestDetailsView />
            </DataTemplate>

            <!--
                InputForms
            -->
            
            <DataTemplate DataType="{x:Type inputFormViewModels:ReservationInputFormViewModel}">
                <inputFormViews:ReservationInputFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type inputFormViewModels:ClassReservationInputFormViewModel}">
                <inputFormViews:ClassReservationInputFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type inputFormViewModels:GuestReservationInputFormViewModel}">
                <inputFormViews:GuestReservationInputFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type inputFormViewModels:ClassInputFormViewModel}">
                <inputFormViews:ClassInputFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type inputFormViewModels:CompanyInputFormViewModel}">
                <inputFormViews:CompanyInputFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type inputFormViewModels:GuestInputFormViewModel}">
                <inputFormViews:GuestInputFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type inputFormViewModels:UserInputFormViewModel}">
                <inputFormViews:UserInputFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type inputFormViewModels:ChangePasswordInputFormViewModel}">
                <inputFormViews:ChangePasswordInputFormView />
            </DataTemplate>

            <!--
                DeleteForms
            -->

            <DataTemplate DataType="{x:Type deleteFormViewModels:GuestDeleteFormViewModel}">
                <deleteFormViews:DeleteFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type deleteFormViewModels:ClassDeleteFormViewModel}">
                <deleteFormViews:DeleteFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type deleteFormViewModels:ClassReservationDeleteFormViewModel}">
                <deleteFormViews:DeleteFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type deleteFormViewModels:GuestReservationDeleteFormViewModel}">
                <deleteFormViews:DeleteFormView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type deleteFormViewModels:UserDeleteFormViewModel}">
                <deleteFormViews:DeleteFormView />
            </DataTemplate>

        </Grid.Resources>

        <!--
            Main Modal
        -->
        <materialDesign:DialogHost
            CloseOnClickAway="False"
            DialogTheme="Inherit"
            IsOpen="{Binding IsModalOpen}"
            Placement="Center">
            <materialDesign:DialogHost.DialogContent>
                <ContentControl Content="{Binding CurrentModalViewModel}" />
            </materialDesign:DialogHost.DialogContent>
            <Grid>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <!--
                        Navigation Bar
                    -->
                    <Grid Grid.Column="0" Background="{StaticResource SecondaryHueMidBrush}">
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ShowNavigationBar}" Value="false">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>

                        <views:NavigationBarView DataContext="{Binding NavigationBarViewModel}" />

                    </Grid>

                    <!--
                        Content Views
                    -->
                    <ContentControl
                        Grid.Column="1"
                        Content="{Binding CurrentMainViewModel}"
                        Visibility="{Binding IsMainOpen, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    <Grid Grid.Column="1" Visibility="{Binding IsSubOpen, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Button
                            Grid.Row="0"
                            HorizontalAlignment="Left"
                            Command="{Binding CloseSubCommand}"
                            Style="{StaticResource MaterialDesignIconButton}"
                            ToolTip="Zurück">
                            <materialDesign:PackIcon Kind="ArrowLeftCircle" />
                        </Button>
                        <ContentControl
                            Grid.Row="0"
                            Grid.RowSpan="2"
                            Content="{Binding CurrentSubViewModel}" />
                    </Grid>

                </Grid>
                <Grid Visibility="{Binding IsViewBlocked, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Grid.Background>
                        <SolidColorBrush Opacity="0.25" Color="Black" />
                    </Grid.Background>
                </Grid>
            </Grid>
        </materialDesign:DialogHost>
    </Grid>

</Window>
